= rubypython

== Description

RubyPython is a bridge between the Ruby and Python interpreters. It embeds a
running Python interpreter in the Ruby application's process using FFI and
provides a means for wrapping, converting, and calling Python objects and
methods.

RubyPython uses FFI to marshall the data between the Ruby and Python VMs and
make Python calls. Recently, RubyPython has added the ability to:

* Inherit from Python classes.
* Configure callbacks from Python.
* Run Python generators (on Ruby 1.9.2 or later).

New in this release is an experimental method to call Python methods that use
named parameters or expect keyword arguments.

== Where

* {RubyForge}[http://rubypython.rubyforge.org/]
* {RubyGems}[http://rubygems.org/gems/rubypython]
* {Bitbucket}[http://raineszm.bitbucket.org/rubypython/]
* {GitHub}[https://github.com/halostatue/rubypython]

The RubyPython homepage, project description, and main downloads can be found
on {RubyForge}[http://rubypython.rubyforge.org/].

Source is kept in sync between
{Bitbucket}[http://raineszm.bitbucket.org/rubypython/] and
{GitHub}[https://github.com/halostatue/rubypython], but the Bitbucket
repository is the canonical repository and where the {issue
tracker}[https://bitbucket.org/raineszm/rubypython/issues?status=new&status=open]
resides. We use {Hg-Git}[http://hg-git.github.com/] to keep the two
repositories in sync.

== Synopsis

RubyPython is fairly easy to start using; there are three phases to its use:

1. Start the Python VM (+RubyPython.start+).
2. Import the Python methods or modules required (+RubyPython.import+).
3. Stop the Python VM (+RubyPython.stop+).

=== Basic Usage

  require "rubypython"

  RubyPython.start # start the Python VM

  cPickle = RubyPython.import("cPickle")
  p cPickle.dumps("Testing rubypython").rubify

  RubyPython.stop # stop the Python VM

=== Specific Python Version

  require "rubypython"

  RubyPython.start(:python_exe => "python2.7") # Can also be a full path

  cPickle = RubyPython.import("cPickle")
  p cPickle.dumps("Testing rubypython").rubify

  RubyPython.stop # stop the Python VM

=== VirtualEnv

  # Easy
  RubyPython.start_from_virtualenv("/path/to/virtualenv")

  # Or verbose
  RubyPython.start(:python => "/path/to/virtualenv/bin/python")
  RubyPython.activate

=== Iterator support

  # Python
  def readfile():
    for line in open("/some/file"):
      yield line

  # Ruby
  readfile.to_enum.each do |line|
    puts line
  end


=== Python to Ruby callbacks

  # Python
  def dosomething(callback):
    print callback(5)

  # Ruby
  dosomething(lambda do |value|
    value * 2
  end)

  def mycallback(value)
    return value * 2
  end

  dosomething(method(:mycallback))

=== Python-style Generators

  # Python
  def test_generator(callback):
    for i in callback():
      print "Got %d" % i

  # Ruby
  test_generator(RubyPython.generator do
    (0..10).each do |i|
      RubyPython.yield i
    end
  end)

=== EXPERIMENTAL: Python named arguments

This format is experimental and may be changed.

  # Python
  def foo(arg1, arg2):
    pass

  # Ruby
  foo!(:arg2 => "bar2", :arg1 => "bar1")

  # with Ruby 1.9
  foo!(arg2: "bar2", arg1: "bar1")

== Features / Problems

=== Features

* Can handle simple conversion of Python builtin types to Ruby builtin types
  and vice versa
* Can import Python modules
* Can execute arbitrary methods on imported modules and return the result
* Python objects can be treated as Ruby objects!
* Python's standard library available to you from within Ruby.
* Pass Ruby methods and procs as callbacks and call them from within Python
  code.
* Specify the python executable to be loaded, including virtualenv.

=== Known Problems

* Builtin Python methods which require a top level frame object (eval, dir,
  ...) do not work properly at present.
* There is no support for passing complicated (non-basic) Ruby types to Python.

== What's planned
There are features that are not currently supported in RubyPython that may be
considered for future releases, dependent on need, interest, and solutions.

=== Simpler Imports
It might be nice to have some nice import helpers provided by RubyPython to make the
interface more seamless and provide advanced import features:

==== Import Aliasing

  # Python
  from mod2.mod1 import sym as mysym

  # Ruby
  py :from => "mod2.mod1", :import => "sym", :as => "mysym"
  py :from => "mod2.mod1", :import => :sym, :as => :mysym
  py :from => [ :mod2, :mod1 ], :import => :sym, :as => :mysym

  # Python
  import mod1 as mymod

  # Ruby
  py :import => "mod1", :as => "mymod"
  py :import => :mod1, :as => :mymod

  # Python
  from mod2.mod1 import *

  # Ruby
  py :from => "mod2.mod1", :import => :*
  pyrequire "mod2/mod1" # ruby style imports

=== Catch Exceptions from Ruby

  # Python
  class MyFirstException(Exception):
    pass

  class MySecondException(MyFirstException):
    pass

  def test():
    raise MySecondException

  # Ruby
  begin
    test
  rescue MyFirstException => e
    # We may need to work out name collisions
    puts e.message
  end

== Requirements

* Python >= 2.4, < 3.0
* Ruby >= 1.8.6
* You must either have the ability to build the Ruby
  {FFI}[https://github.com/ffi/ffi] gem in your environment or have a pre-built
  one that you can install.

=== Python Support
RubyPython has been tested with the C-based Python interpreter (cpython),
versions 2.4 through 2.7. Work is planned to enable Python 3 support, but has
not yet been started. If you're interested in helping us enable Python 3
support, please let us know.

=== Ruby Support
RubyPython has been tested with the C-based Ruby interpreter (MRI), versions
1.8.7 and 1.9.2. It should work with other implementations that support the
Ruby FFI gem with no modification.

=== OS Support
RubyPython has been tested on Mac OS 10.5 and 10.6, and Ubuntu 10.10 (64-bit
Intel). If your platform has a DLL or shared object version of Python and
supports the FFI gem, it should work. Feedback on other platforms is always
welcome.

== Install
  gem install rubypython

== Contributors

RubyPython has a growing list of contributors. See Contributors.rdoc for the
known list.

== License

RubyPython is available under the MIT license; see License.rdoc for details.
